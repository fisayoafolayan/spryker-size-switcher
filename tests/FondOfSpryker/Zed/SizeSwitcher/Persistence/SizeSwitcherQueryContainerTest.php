<?php

namespace FondOfSpryker\Zed\SizeSwitcher\Persistence;

use Codeception\Test\Unit;
use Orm\Zed\Availability\Persistence\SpyAvailabilityAbstractQuery;
use Propel\Runtime\ActiveQuery\ModelCriteria;

class SizeSwitcherQueryContainerTest extends Unit
{
    /**
     * @var \FondOfSpryker\Zed\SizeSwitcher\Persistence\SizeSwitcherQueryContainer
     */
    protected $sizeSwitcherQueryContainer;

    /**
     * @var \FondOfSpryker\Zed\SizeSwitcher\Persistence\SizeSwitcherPersistenceFactory|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $factoryMock;

    /**
     * @var \Orm\Zed\Availability\Persistence\SpyAvailabilityAbstractQuery|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $spyAvailabilityAbstractQueryMock;

    /**
     * @var \Propel\Runtime\ActiveQuery\ModelCriteria|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $modelCriteriaMock;

    /**
     * @return void
     */
    protected function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub

        $this->factoryMock = $this->getMockBuilder(SizeSwitcherPersistenceFactory::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->spyAvailabilityAbstractQueryMock = $this->getMockBuilder(SpyAvailabilityAbstractQuery::class)
            ->disableOriginalConstructor()
            ->setMethods(['select'])
            ->getMock();

        $this->modelCriteriaMock = $this->getMockBuilder(ModelCriteria::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->sizeSwitcherQueryContainer = new SizeSwitcherQueryContainer();
        $this->sizeSwitcherQueryContainer->setFactory($this->factoryMock);
    }

    /**
     * @return void
     */
    public function testQueryProductAbstractSkusByAvailabilityIds()
    {
        $this->factoryMock->expects($this->once())
            ->method('createSpyAvailabilityAbstractQuery')
            ->willReturn($this->spyAvailabilityAbstractQueryMock);

        $value = $this->sizeSwitcherQueryContainer->queryProductAbstractSkusByAvailabilityIds([1111]);
    }
}
