<?php

namespace FondOfSpryker\Zed\SizeSwitcher\Business\Publisher;

use Codeception\Test\Unit;
use FondOfSpryker\Yves\GoogleTagManager\ControllerEventHandler\Cart\ChangeQuantityProductControllerEventHandler;
use FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToProductPageSearchFacadeBridge;
use FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToStoreFacadeBridge;
use FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToEventBehaviorFacadeBridge;
use FondOfSpryker\Zed\SizeSwitcher\Persistence\SizeSwitcherRepository;
use Generated\Shared\Transfer\EventEntityTransfer;
use ReflectionClass;

class ProductAbstractPageSearchPublisherTest extends Unit
{
    /**
     * @var \FondOfSpryker\Zed\SizeSwitcher\Business\Publisher\ProductAbstractPageSearchPublisher
     */
    protected $publisher;

    /**
     * @var SizeSwitcherToEventBehaviorFacadeBridge|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $storeFacadeMock;

    /**
     * @var SizeSwitcherToEventBehaviorFacadeBridge|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $eventFacadeMock;

    /**
     * @var SizeSwitcherToProductPageSearchFacadeBridge|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $productPageSearchFacadeMock;

    /**
     * @var EventEntityTransfer[]
     */
    protected $eventTransferCollection;

    /**
     * @var SizeSwitcherRepository|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $repositoryMock;

    protected function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub

        $this->storeFacadeMock = $this->getMockBuilder(SizeSwitcherToStoreFacadeBridge::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->eventFacadeMock = $this->getMockBuilder(SizeSwitcherToEventBehaviorFacadeBridge::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->productPageSearchFacadeMock = $this->getMockBuilder(SizeSwitcherToProductPageSearchFacadeBridge::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->repositoryMock = $this->getMockBuilder(SizeSwitcherRepository::class)
            ->disableOriginalConstructor()
            ->setMethods()
            ->getMock();

        $eventEntityTransfer = include codecept_data_dir('EventEntityTransfer.php');
        $this->eventTransferCollection = [
            $eventEntityTransfer,
        ];

        $this->publisher = new ProductAbstractPageSearchPublisher(
            $this->storeFacadeMock,
            $this->eventFacadeMock,
            $this->productPageSearchFacadeMock,
            $this->repositoryMock
        );
    }

    public function testPublish(): void
    {
        $this->eventFacadeMock->expects($this->once())
            ->method('getEventTransferIds');

        $this->publisher->publish($this->eventTransferCollection);
    }

    public function testQueryAbvailabiltyAbstractIdsByAvailabilityIds()
    {
        $method = $this->getMethod('queryAbvailabiltyAbstractIdsByAvailabilityIds');
        $result = $method->invokeArgs($this->eventTransferCollection);
        $this->assertIsArray($result);
    }

    /**
     * @param string $name
     *
     * @return \ReflectionMethod
     */
    protected function getMethod(string $name)
    {
        $class = new ReflectionClass(ProductAbstractPageSearchPublisher::class);
        $method = $class->getMethod($name);
        $method->setAccessible(true);

        return $method;
    }
}
