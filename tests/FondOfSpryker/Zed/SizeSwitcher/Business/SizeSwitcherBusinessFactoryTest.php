<?php

namespace FondOfSpryker\Zed\SizeSwitcher\Business;

use Codeception\Test\Unit;
use FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToEventBehaviorFacadeBridge;
use FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToEventBehaviorFacadeInterface;
use FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToProductPageSearchFacadeBridge;
use FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToProductPageSearchFacadeInterface;
use FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToStoreFacadeBridge;
use FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToStoreFacadeInterface;
use FondOfSpryker\Zed\SizeSwitcher\Persistence\SizeSwitcherRepository;
use org\bovigo\vfs\vfsStream;
use Spryker\Shared\Config\Config;

class SizeSwitcherBusinessFactoryTest extends Unit
{
    /**
     * @var \FondOfSpryker\Zed\SizeSwitcher\Business\SizeSwitcherBusinessFactory
     */
    protected $factory;

    /**
     * @var \FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToStoreFacadeBridge|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $storeFacadeMock;

    /**
     * @var \FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToEventBehaviorFacadeBridge|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $eventBehaviorFacadeMock;

    /**
     * @var \FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToProductPageSearchFacadeBridge|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $productPageSearchFacadeMock;

    /**
     * @var \FondOfSpryker\Zed\SizeSwitcher\Persistence\SizeSwitcherRepository|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $repository;

    /**
     * @return void
     */
    protected function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub

        $this->vfsStreamDirectory = vfsStream::setup('root', null, [
            'config' => [
                'Shared' => [
                    'stores.php' => file_get_contents(codecept_data_dir('stores.php')),
                    'config_default.php' => file_get_contents(codecept_data_dir('empty_config_default.php')),
                ],
            ],
        ]);

        $fileUrl = vfsStream::url('root/config/Shared/config_default.php');
        $newFileContent = file_get_contents(codecept_data_dir('empty_config_default.php'));
        file_put_contents($fileUrl, $newFileContent);

        Config::getInstance()->init();

        $this->eventBehaviorFacadeMock = $this->getMockBuilder(SizeSwitcherToEventBehaviorFacadeBridge::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->productPageSearchFacadeMock = $this->getMockBuilder(SizeSwitcherToProductPageSearchFacadeBridge::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->storeFacadeMock = $this->getMockBuilder(SizeSwitcherToStoreFacadeBridge::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->repository = $this->getMockBuilder(SizeSwitcherRepository::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->factory = new SizeSwitcherBusinessFactory();
        $this->factory->setRepository($this->repository);
    }


    /**
     * @return void
     */
    public function testGetEventBehaviorFacade(): void
    {
        $this->assertInstanceOf(
            SizeSwitcherToEventBehaviorFacadeInterface::class,
            $this->factory->getEventBehaviorFacade()
        );
    }

    /**
     * @return void
     */
    public function testGetProductPageSearchFacade(): void
    {
        $this->assertInstanceOf(
            SizeSwitcherToProductPageSearchFacadeInterface::class,
            $this->factory->getProductPageSearchFacade()
        );
    }

    /**
     * @return void
     */
    public function testGetStoreFacade(): void
    {
        $this->assertInstanceOf(
            SizeSwitcherToStoreFacadeInterface::class,
            $this->factory->getStoreFacade()
        );
    }

    /**
     * @return void
     */
    public function testCreateProductAbstractPageSearchPublisher(): void
    {
        $this->assertInstanceOf(
            ProductAbstractPageSearchPublisherInterface::class,
            $this->factory->createProductAbstractPageSearchPublisher()
        );
    }
}
