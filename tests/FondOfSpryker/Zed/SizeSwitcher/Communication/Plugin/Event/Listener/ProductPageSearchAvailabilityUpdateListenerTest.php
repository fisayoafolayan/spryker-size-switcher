<?php

namespace FondOfSpryker\Zed\SizeSwitcher\Communication\Plugin\Event\Listener;

use Codeception\Test\Unit;
use FondOfSpryker\Zed\SizeSwitcher\Communication\SizeSwitcherCommunicationFactory;
use FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToEventBehaviorFacadeBridge;
use FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToProductPageSearchFacadeBridge;
use FondOfSpryker\Zed\SizeSwitcher\Persistence\SizeSwitcherQueryContainer;
use Orm\Zed\Availability\Persistence\SpyAvailabilityAbstractQuery;
use Orm\Zed\Product\Persistence\SpyProductAbstractQuery;
use Propel\Runtime\Collection\Collection;

class ProductPageSearchAvailabilityUpdateListenerTest extends Unit
{
    /**
     * @var \FondOfSpryker\Zed\SizeSwitcher\Communication\Plugin\Event\Listener\ProductPageSearchAvailabilityUpdateListener
     */
    protected $plugin;

    /**
     * @var \FondOfSpryker\Zed\SizeSwitcher\Communication\SizeSwitcherCommunicationFactory|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $factory;

    /**
     * @var \FondOfSpryker\Zed\SizeSwitcher\Persistence\SizeSwitcherQueryContainer|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $queryContainer;

    /**
     * @var \FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToEventBehaviorFacadeBridge|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $eventBehaviorFacade;

    /**
     * @var \Orm\Zed\Availability\Persistence\SpyAvailabilityAbstractQuery|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $spyAvailabilityAbstractQuery;

    /**
     * @var \FondOfSpryker\Zed\SizeSwitcher\Dependency\Facade\SizeSwitcherToProductPageSearchFacadeBridge|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $productPageSearchFacade;

    /**
     * @var \Propel\Runtime\Collection\Collection|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $collection1;

    /**
     * @var \Propel\Runtime\Collection\Collection|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $collection2;

    /**
     * @var \Orm\Zed\Product\Persistence\SpyProductAbstractQuery|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $spyProductAbstractQuery;

    /**
     * @return void
     */
    protected function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub

        $this->factory = $this->getMockBuilder(SizeSwitcherCommunicationFactory::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->queryContainer = $this->getMockBuilder(SizeSwitcherQueryContainer::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->eventBehaviorFacade = $this->getMockBuilder(SizeSwitcherToEventBehaviorFacadeBridge::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->spyAvailabilityAbstractQuery = $this->getMockBuilder(SpyAvailabilityAbstractQuery::class)
            ->setMethods(['find'])
            ->disableOriginalConstructor()
            ->getMock();

        $this->collection1 = $this->getMockBuilder(Collection::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->collection2 = $this->getMockBuilder(Collection::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->productPageSearchFacade = $this->getMockBuilder(SizeSwitcherToProductPageSearchFacadeBridge::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->spyProductAbstractQuery = $this->getMockBuilder(SpyProductAbstractQuery::class)
            ->setMethods(['find'])
            ->disableOriginalConstructor()
            ->getMock();

        $this->plugin = new ProductPageSearchAvailabilityUpdateListener();
        $this->plugin->setFactory($this->factory);
        $this->plugin->setQueryContainer($this->queryContainer);
    }

    /**
     * @return void
     */
    public function testHandleBulk()
    {
        $eventEntityTransfer = include codecept_data_dir('EventEntityTransfer.php');
        $eventEntityTransferCollection = [
            $eventEntityTransfer,
        ];

        $this->factory->expects($this->once())
            ->method('getEventBehaviorFacade')
            ->willReturn($this->eventBehaviorFacade);

        $this->eventBehaviorFacade->expects($this->once())
            ->method('getEventTransferIds')
            ->willReturn([1612]);

        $this->queryContainer->expects($this->once())
            ->method('queryProductAbstractSkusByAvailabilityIds')
            ->willReturn($this->spyAvailabilityAbstractQuery);

        $this->spyAvailabilityAbstractQuery->expects($this->once())
            ->method('find')
            ->willReturn($this->collection1);

        $this->collection1->expects($this->once())
            ->method('getData')
            ->willReturn(['SKU-XXX-XXX']);

        $this->queryContainer->expects($this->once())
            ->method('queryProductAbstractIdsBySku')
            ->willReturn($this->spyProductAbstractQuery);

        $this->spyProductAbstractQuery->expects($this->once())
            ->method('find')
            ->willReturn($this->collection2);

        $this->collection2->expects($this->once())
            ->method('getData')
            ->willReturn([1111]);

        $this->factory->expects($this->once())
            ->method('getProductPageSearchFacade')
            ->willReturn($this->productPageSearchFacade);

        $this->productPageSearchFacade->expects($this->once())
            ->method('publish')
            ->with([1111]);

        $this->plugin->handleBulk($eventEntityTransferCollection, 'Entity.spy_availability.update');
    }
}
